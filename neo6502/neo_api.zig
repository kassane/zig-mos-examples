const std = @import("std");
pub const struct___ControlPort = extern struct {
    command: u8 = std.mem.zeroes(u8),
    function: u8 = std.mem.zeroes(u8),
    @"error": u8 = std.mem.zeroes(u8),
    status: u8 = std.mem.zeroes(u8),
    params: [8]u8 = std.mem.zeroes([8]u8),
    reserved: [4]u8 = std.mem.zeroes([4]u8),
};
pub const struct_neo_pstring = extern struct {
    length: u8 align(1) = std.mem.zeroes(u8),
    pub fn data(self: anytype) std.zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = std.zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = std.zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 1)));
    }
};
pub const neo_pstring_t = struct_neo_pstring;
pub extern fn neo_api_error() u8;
pub extern fn neo_system_timer() c_long;
pub extern fn neo_system_key_status(key: u8) u8;
pub extern fn neo_system_credits() void;
pub extern fn neo_system_serial_update() void;
pub extern fn neo_system_locale(locale: [*c]const u8) void;
pub extern fn neo_system_reset() noreturn;
pub extern fn neo_console_read_char() u8;
pub extern fn neo_console_status() u8;
pub extern fn neo_console_read_line_p(line: [*c]neo_pstring_t) void;
pub extern fn neo_console_read_line(line: [*c]u8) void;
pub extern fn neo_console_define_hotkey_p(hotkey: u8, str: [*c]const neo_pstring_t) void;
pub extern fn neo_console_define_hotkey(hotkey: u8, str: [*c]const u8) void;
pub extern fn neo_console_define_char(ch: u8, bitmap: [*c]const u8) void;
pub extern fn neo_console_write_char(ch: u8) void;
pub extern fn neo_console_set_cursor_pos(x: u8, y: u8) void;
pub extern fn neo_console_list_hotkeys() void;
pub extern fn neo_console_screen_size(width: [*c]u8, height: [*c]u8) void;
pub extern fn neo_console_clear_screen() void;
pub extern fn neo_console_cursor_pos(x: [*c]u8, y: [*c]u8) void;
pub extern fn neo_console_clear_region(x1: u8, y1: u8, x2: u8, y2: u8) void;
pub extern fn neo_console_set_text_color(fg: u8, bg: u8) void;
pub const NEO_FILE_READ: c_int = 0;
pub const NEO_FILE_WRITE: c_int = 1;
pub const NEO_FILE_READ_WRITE: c_int = 2;
pub const NEO_FILE_CREATE: c_int = 3;
pub const enum_neo_file_mode = c_uint;
pub const neo_file_mode_t = enum_neo_file_mode;
pub const struct_neo_file_stat = extern struct {
    size: u32 = std.mem.zeroes(u32),
    attr: u8 = std.mem.zeroes(u8),
};
pub const neo_file_stat_t = struct_neo_file_stat;
pub extern fn neo_file_list_directory() void;
pub extern fn neo_file_load_p(filename: [*c]const neo_pstring_t, dest: ?*anyopaque) void;
pub extern fn neo_file_load(filename: [*c]const u8, dest: ?*anyopaque) void;
pub extern fn neo_file_store_p(filename: [*c]const neo_pstring_t, src: ?*const anyopaque, len: u16) void;
pub extern fn neo_file_store(filename: [*c]const u8, src: ?*const anyopaque, len: u16) void;
pub extern fn neo_file_open_p(channel: u8, filename: [*c]const neo_pstring_t, mode: u8) void;
pub extern fn neo_file_open(channel: u8, filename: [*c]const u8, mode: u8) void;
pub extern fn neo_file_close(channel: u8) void;
pub extern fn neo_file_seek(channel: u8, pos: u32) void;
pub extern fn neo_file_tell(channel: u8) u32;
pub extern fn neo_file_read(channel: u8, dest: ?*anyopaque, len: u16) u16;
pub extern fn neo_file_write(channel: u8, src: ?*const anyopaque, len: u16) u32;
pub extern fn neo_file_size(channel: u8) u32;
pub extern fn neo_file_set_size(channel: u8, size: u32) void;
pub extern fn neo_file_rename_p(from: [*c]const neo_pstring_t, to: [*c]const neo_pstring_t) void;
pub extern fn neo_file_rename(from: [*c]const u8, to: [*c]const u8) void;
pub extern fn neo_file_delete_p(filename: [*c]const neo_pstring_t) void;
pub extern fn neo_file_delete(filename: [*c]const u8) void;
pub extern fn neo_file_chdir_p(path: [*c]const neo_pstring_t) void;
pub extern fn neo_file_chdir(path: [*c]const u8) void;
pub extern fn neo_file_mkdir_p(path: [*c]const neo_pstring_t) void;
pub extern fn neo_file_mkdir(path: [*c]const u8) void;
pub extern fn neo_file_stat_p(path: [*c]const neo_pstring_t, st: [*c]neo_file_stat_t) void;
pub extern fn neo_file_stat(path: [*c]const u8, st: [*c]neo_file_stat_t) void;
pub extern fn neo_file_opendir_p(path: [*c]const neo_pstring_t) void;
pub extern fn neo_file_opendir(path: [*c]const u8) void;
pub extern fn neo_file_readdir_p(path: [*c]neo_pstring_t, st: [*c]neo_file_stat_t) void;
pub extern fn neo_file_readdir(path: [*c]u8, st: [*c]neo_file_stat_t) void;
pub extern fn neo_file_closedir() void;
pub extern fn neo_file_copy_p(from: [*c]const neo_pstring_t, to: [*c]const neo_pstring_t) void;
pub extern fn neo_file_copy(from: [*c]const u8, to: [*c]const u8) void;
pub extern fn neo_file_set_attr_p(path: [*c]const neo_pstring_t, attr: u8) void;
pub extern fn neo_file_set_attr(path: [*c]const u8, attr: u8) void;
pub extern fn neo_file_list_filtered_p(filter: [*c]const neo_pstring_t) void;
pub extern fn neo_file_list_filtered(filter: [*c]const u8) void;
pub extern fn neo_graphics_set_defaults(color_mask: u8, color_xor: u8, fill: u8, extent: u8, flip: u8) void;
pub extern fn neo_graphics_draw_line(x1: u16, y1: u16, x2: u16, y2: u16) void;
pub extern fn neo_graphics_draw_rectangle(x1: u16, y1: u16, x2: u16, y2: u16) void;
pub extern fn neo_graphics_draw_ellipse(x1: u16, y1: u16, x2: u16, y2: u16) void;
pub extern fn neo_graphics_draw_pixel(x: u16, y: u16) void;
pub extern fn neo_graphics_draw_text_p(x: u16, y: u16, text: [*c]const neo_pstring_t) void;
pub extern fn neo_graphics_draw_text(x: u16, y: u16, text: [*c]const u8) void;
pub extern fn neo_graphics_draw_image(x: u16, y: u16, id: u8) void;
pub extern fn neo_graphics_draw_tilemap(x1: u16, y1: u16, x2: u16, y2: u16) void;
pub extern fn neo_graphics_set_palette(idx: u8, r: u8, g: u8, b: u8) void;
pub extern fn neo_graphics_read_pixel(x: u16, y: u16) u8;
pub extern fn neo_graphics_reset_palette() void;
pub extern fn neo_graphics_set_tilemap(src: ?*const anyopaque, x: u16, y: u16) void;
pub extern fn neo_graphics_frame_count() c_long;
pub extern fn neo_graphics_set_color(idx: u8) void;
pub extern fn neo_graphics_set_solid_flag(value: u8) void;
pub extern fn neo_graphics_set_draw_size(value: u8) void;
pub extern fn neo_graphics_set_flip_bits(value: u8) void;
pub extern fn neo_sprite_reset() void;
pub extern fn neo_sprite_set(id: u8, x: u16, y: u16, img: u8, flip: u8, anchor: u8) void;
pub extern fn neo_sprite_hide(id: u8) void;
pub extern fn neo_sprite_collision(first: u8, second: u8, distance: u8) bool;
pub extern fn neo_sprite_position(id: u8, x: [*c]u16, y: [*c]u16) void;
pub extern fn neo_controller_read() u8;
pub extern fn neo_sound_reset() void;
pub extern fn neo_sound_reset_channel(channel: u8) void;
pub extern fn neo_sound_beep() void;
pub extern fn neo_sound_queue(channel: u8, frequency: u16, duration: u16, slide: u16, target: u8) void;
pub extern fn neo_sound_play_effect(channel: u8, id: u8) void;
pub extern fn neo_sound_status(channel: u8) u8;
pub extern fn neo_turtle_init(idx: u8) void;
pub extern fn neo_turtle_turn(deg: i16) void;
pub extern fn neo_turtle_move(len: i16, color: u8, pen: u8) void;
pub extern fn neo_turtle_hide() void;
pub extern fn neo_turtle_home() void;
pub const NEO_UEXT_INPUT: c_int = 1;
pub const NEO_UEXT_OUTPUT: c_int = 2;
pub const NEO_UEXT_ANALOGUE_INPUT: c_int = 3;
pub const enum_neo_uext_direction = c_uint;
pub const neo_uext_direction_t = enum_neo_uext_direction;
pub extern fn neo_uext_init() void;
pub extern fn neo_uext_gpio_write(pin: u8, value: u8) void;
pub extern fn neo_uext_gpio_read(pin: u8) u8;
pub extern fn neo_uext_gpio_set_direction(pin: u8, direction: u8) void;
pub extern fn neo_uext_i2c_write(device: u8, reg: u8, value: u8) void;
pub extern fn neo_uext_i2c_read(device: u8, reg: u8) u8;
pub extern fn neo_uext_analogue_read(pin: u8) u16;
pub extern fn neo_uext_i2c_status(device: u8) u8;
pub extern fn neo_uext_i2c_block_read(device: u8, dest: ?*anyopaque, len: u16) void;
pub extern fn neo_uext_i2c_block_write(device: u8, src: ?*const anyopaque, len: u16) void;
pub extern fn neo_uext_spi_block_read(device: u8, dest: ?*anyopaque, len: u16) void;
pub extern fn neo_uext_spi_block_write(device: u8, src: ?*const anyopaque, len: u16) void;

pub const ControlPort = @compileError("unable to translate C expr: unexpected token 'volatile'");
// /home/kassane/zig-bootstrap/zig-mos-examples/../out/llvm-mos/mos-platform/neo6502/include/neo6502.h:25:9

pub const API_ERROR_NONE = @as(c_int, 0x00);
pub const API_STATUS_ESC = @as(c_int, 0x07);
pub const API_STATUS_ESC_MASK = @as(c_int, 0x80);
pub const API_GROUP_SYSTEM = @as(c_int, 0x01);
pub const API_FN_TIMER = @as(c_int, 0x01);
pub const API_FN_KEY_STATUS = @as(c_int, 0x02);
pub const API_FN_BASIC = @as(c_int, 0x03);
pub const API_FN_CREDITS = @as(c_int, 0x04);
pub const API_FN_SERIAL_STATUS = @as(c_int, 0x05);
pub const API_FN_LOCALE = @as(c_int, 0x06);
pub const API_FN_RESET = @as(c_int, 0x07);
pub const API_GROUP_CONSOLE = @as(c_int, 0x02);
pub const API_FN_READ_CHAR = @as(c_int, 0x01);
pub const API_FN_CONSOLE_STATUS = @as(c_int, 0x02);
pub const API_FN_READ_LINE = @as(c_int, 0x03);
pub const API_FN_DEFINE_HOTKEY = @as(c_int, 0x04);
pub const API_FN_DEFINE_CHAR = @as(c_int, 0x05);
pub const API_FN_WRITE_CHAR = @as(c_int, 0x06);
pub const API_FN_SET_CURSOR_POS = @as(c_int, 0x07);
pub const API_FN_LIST_HOTKEYS = @as(c_int, 0x08);
pub const API_FN_SCREEN_SIZE = @as(c_int, 0x09);
pub const API_FN_INSERT_LINE = @as(c_int, 0x0A);
pub const API_FN_DELETE_LINE = @as(c_int, 0x0B);
pub const API_FN_CLEAR_SCREEN = @as(c_int, 0x0C);
pub const API_FN_CURSOR_POS = @as(c_int, 0x0D);
pub const API_FN_CLEAR_REGIION = @as(c_int, 0x0E);
pub const API_FN_SET_TEXT_COLOR = @as(c_int, 0x0F);
pub const API_FN_CURSOR_INVERSE = @as(c_int, 0x10);
pub const API_QUEUE_EMPTY = @as(c_int, 0xFF);
pub const API_GROUP_FILEIO = @as(c_int, 0x03);
pub const API_FN_LIST_DIRECTORY = @as(c_int, 0x01);
pub const API_FN_LOAD_FILENAME = @as(c_int, 0x02);
pub const API_FN_STORE_FILENAME = @as(c_int, 0x03);
pub const API_FN_FILE_OPEN = @as(c_int, 0x04);
pub const API_FN_FILE_CLOSE = @as(c_int, 0x05);
pub const API_FN_FILE_SEEK = @as(c_int, 0x06);
pub const API_FN_FILE_TELL = @as(c_int, 0x07);
pub const API_FN_FILE_READ = @as(c_int, 0x08);
pub const API_FN_FILE_WRITE = @as(c_int, 0x09);
pub const API_FN_FILE_SIZE = @as(c_int, 0x0A);
pub const API_FN_FILE_SET_SIZE = @as(c_int, 0x0B);
pub const API_FN_FILE_RENAME = @as(c_int, 0x0C);
pub const API_FN_FILE_DELETE = @as(c_int, 0x0D);
pub const API_FN_DIR_MKDIR = @as(c_int, 0x0E);
pub const API_FN_DIR_CHDIR = @as(c_int, 0x0F);
pub const API_FN_FILE_STAT = @as(c_int, 0x10);
pub const API_FN_DIR_OPEN = @as(c_int, 0x11);
pub const API_FN_DIR_READ = @as(c_int, 0x12);
pub const API_FN_DIR_CLOSE = @as(c_int, 0x13);
pub const API_FN_FILE_COPY = @as(c_int, 0x14);
pub const API_FN_FILE_SET_ATTR = @as(c_int, 0x15);
pub const API_FN_LIST_FILTERED = @as(c_int, 0x20);
pub const API_FILE_TO_SCREEN = std.zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hex);
pub const API_GROUP_MATH = @as(c_int, 0x04);
pub const API_FN_ADD = @as(c_int, 0x00);
pub const API_FN_SUB = @as(c_int, 0x01);
pub const API_FN_MUL = @as(c_int, 0x02);
pub const API_FN_DIV_DEC = @as(c_int, 0x03);
pub const API_FN_DIV_INT = @as(c_int, 0x04);
pub const API_FN_MOD = @as(c_int, 0x05);
pub const API_FN_COMP = @as(c_int, 0x06);
pub const API_FN_NEG = @as(c_int, 0x10);
pub const API_FN_FLOOR = @as(c_int, 0x11);
pub const API_FN_SQRT = @as(c_int, 0x12);
pub const API_FN_SINE = @as(c_int, 0x13);
pub const API_FN_COS = @as(c_int, 0x14);
pub const API_FN_TAN = @as(c_int, 0x15);
pub const API_FN_ATAN = @as(c_int, 0x16);
pub const API_FN_EXP = @as(c_int, 0x17);
pub const API_FN_LOG = @as(c_int, 0x18);
pub const API_FN_ABS = @as(c_int, 0x19);
pub const API_FN_SIGN = @as(c_int, 0x1A);
pub const API_FN_RND_DEC = @as(c_int, 0x1B);
pub const API_FN_RND_INT = @as(c_int, 0x1C);
pub const API_FN_INT_TO_DEC = @as(c_int, 0x20);
pub const API_FN_STR_TO_NUM = @as(c_int, 0x21);
pub const API_FN_NUM_TO_STR = @as(c_int, 0x22);
pub const API_GROUP_GRAPHICS = @as(c_int, 0x05);
pub const API_FN_SET_GFX = @as(c_int, 0x01);
pub const API_FN_DRAW_LINE = @as(c_int, 0x02);
pub const API_FN_DRAW_RECT = @as(c_int, 0x03);
pub const API_FN_DRAW_ELLIPSE = @as(c_int, 0x04);
pub const API_FN_DRAW_PIXEL = @as(c_int, 0x05);
pub const API_FN_DRAW_TEXT = @as(c_int, 0x06);
pub const API_FN_DRAW_IMG = @as(c_int, 0x07);
pub const API_FN_DRAW_TILEMAP = @as(c_int, 0x08);
pub const API_FN_SET_PALETTE = @as(c_int, 0x20);
pub const API_FN_READ_PIXEL = @as(c_int, 0x21);
pub const API_FN_RESET_PALETTE = @as(c_int, 0x22);
pub const API_FN_SET_TILEMAP = @as(c_int, 0x23);
pub const API_FN_READ_SPRITE_PXL = @as(c_int, 0x24);
pub const API_FN_FRAME_COUNT = @as(c_int, 0x25);
pub const API_FN_SET_COLOR = @as(c_int, 0x40);
pub const API_FN_SET_SOLID = @as(c_int, 0x41);
pub const API_FN_SET_DRAW_SIZE = @as(c_int, 0x42);
pub const API_FN_SET_FLIP = @as(c_int, 0x43);
pub const API_FLIP_HORZ = @as(c_int, 0x00);
pub const API_FLIP_VERT = @as(c_int, 0x01);
pub const API_PIXEL_TRANSPARENT = @as(c_int, 0x00);
pub const API_GROUP_SPRITES = @as(c_int, 0x06);
pub const API_FN_SPRITE_RESET = @as(c_int, 0x01);
pub const API_FN_SPRITE_SET = @as(c_int, 0x02);
pub const API_FN_SPRITE_HIDE = @as(c_int, 0x03);
pub const API_FN_SPRITE_COLLISION = @as(c_int, 0x04);
pub const API_FN_SPRITE_POS = @as(c_int, 0x05);
pub const API_SPRITE_TURTLE = @as(c_int, 0x00);
pub const API_SPRITE_32BIT = @as(c_int, 0x40);
pub const API_SPRITE_CLEAR = @as(c_int, 0x80);
pub const API_ANCHOR_BL = @as(c_int, 0x01);
pub const API_ANCHOR_B = @as(c_int, 0x02);
pub const API_ANCHOR_BR = @as(c_int, 0x03);
pub const API_ANCHOR_L = @as(c_int, 0x04);
pub const API_ANCHOR_C = @as(c_int, 0x05);
pub const API_ANCHOR_R = @as(c_int, 0x06);
pub const API_ANCHOR_TL = @as(c_int, 0x07);
pub const API_ANCHOR_T = @as(c_int, 0x08);
pub const API_ANCHOR_TR = @as(c_int, 0x09);
pub const API_COLLISION_NONE = @as(c_int, 0x00);
pub const API_GROUP_CONTROLLER = @as(c_int, 0x07);
pub const API_FN_READ_CONTROLLER = @as(c_int, 0x01);
pub const API_CONTROLLER_LEFT = @as(c_int, 0x01);
pub const API_CONTROLLER_RIGHT = @as(c_int, 0x02);
pub const API_CONTROLLER_UP = @as(c_int, 0x04);
pub const API_CONTROLLER_DOWN = @as(c_int, 0x08);
pub const API_CONTROLLER_BTNA = @as(c_int, 0x10);
pub const API_CONTROLLER_BTNB = @as(c_int, 0x20);
pub const API_GROUP_SOUND = @as(c_int, 0x08);
pub const API_FN_RESET_SOUND = @as(c_int, 0x01);
pub const API_FN_RESET_CHANNEL = @as(c_int, 0x02);
pub const API_FN_BEEP = @as(c_int, 0x03);
pub const API_FN_QUEUE_SOUND = @as(c_int, 0x04);
pub const API_FN_PLAY_SOUND = @as(c_int, 0x05);
pub const API_FN_SOUND_STATUS = @as(c_int, 0x06);
pub const API_SOUND_CH_00 = @as(c_int, 0x00);
pub const API_NOTE_REST = @as(c_int, 0x0000);
pub const API_NOTE_C0 = @as(c_int, 0x0010);
pub const API_NOTE_Cs0 = @as(c_int, 0x0011);
pub const API_NOTE_Df0 = @as(c_int, 0x0011);
pub const API_NOTE_D0 = @as(c_int, 0x0012);
pub const API_NOTE_Ds0 = @as(c_int, 0x0013);
pub const API_NOTE_Ef0 = @as(c_int, 0x0013);
pub const API_NOTE_E0 = @as(c_int, 0x0015);
pub const API_NOTE_F0 = @as(c_int, 0x0016);
pub const API_NOTE_Fs0 = @as(c_int, 0x0017);
pub const API_NOTE_Gf0 = @as(c_int, 0x0017);
pub const API_NOTE_G0 = @as(c_int, 0x0018);
pub const API_NOTE_Af0 = @as(c_int, 0x001A);
pub const API_NOTE_Gs0 = @as(c_int, 0x001A);
pub const API_NOTE_A0 = @as(c_int, 0x001C);
pub const API_NOTE_As0 = @as(c_int, 0x001D);
pub const API_NOTE_Bf0 = @as(c_int, 0x001D);
pub const API_NOTE_B0 = @as(c_int, 0x001F);
pub const API_NOTE_C1 = @as(c_int, 0x0021);
pub const API_NOTE_Cs1 = @as(c_int, 0x0023);
pub const API_NOTE_Df1 = @as(c_int, 0x0023);
pub const API_NOTE_D1 = @as(c_int, 0x0025);
pub const API_NOTE_Ds1 = @as(c_int, 0x0027);
pub const API_NOTE_Ef1 = @as(c_int, 0x0027);
pub const API_NOTE_E1 = @as(c_int, 0x0029);
pub const API_NOTE_F1 = @as(c_int, 0x002C);
pub const API_NOTE_Fs1 = @as(c_int, 0x002E);
pub const API_NOTE_Gf1 = @as(c_int, 0x002E);
pub const API_NOTE_G1 = @as(c_int, 0x0031);
pub const API_NOTE_Af1 = @as(c_int, 0x0034);
pub const API_NOTE_Gs1 = @as(c_int, 0x0034);
pub const API_NOTE_A1 = @as(c_int, 0x0037);
pub const API_NOTE_As1 = @as(c_int, 0x003A);
pub const API_NOTE_Bf1 = @as(c_int, 0x003A);
pub const API_NOTE_B1 = @as(c_int, 0x003E);
pub const API_NOTE_C2 = @as(c_int, 0x0041);
pub const API_NOTE_Cs2 = @as(c_int, 0x0045);
pub const API_NOTE_Df2 = @as(c_int, 0x0045);
pub const API_NOTE_D2 = @as(c_int, 0x0049);
pub const API_NOTE_Ds2 = @as(c_int, 0x004E);
pub const API_NOTE_Ef2 = @as(c_int, 0x004E);
pub const API_NOTE_E2 = @as(c_int, 0x0052);
pub const API_NOTE_F2 = @as(c_int, 0x0057);
pub const API_NOTE_Fs2 = @as(c_int, 0x005C);
pub const API_NOTE_Gf2 = @as(c_int, 0x005C);
pub const API_NOTE_G2 = @as(c_int, 0x0062);
pub const API_NOTE_Af2 = @as(c_int, 0x0068);
pub const API_NOTE_Gs2 = @as(c_int, 0x0068);
pub const API_NOTE_A2 = @as(c_int, 0x006E);
pub const API_NOTE_As2 = @as(c_int, 0x0075);
pub const API_NOTE_Bf2 = @as(c_int, 0x0075);
pub const API_NOTE_B2 = @as(c_int, 0x007B);
pub const API_NOTE_C3 = @as(c_int, 0x0083);
pub const API_NOTE_Cs3 = @as(c_int, 0x008B);
pub const API_NOTE_Df3 = @as(c_int, 0x008B);
pub const API_NOTE_D3 = @as(c_int, 0x0093);
pub const API_NOTE_Ds3 = @as(c_int, 0x009C);
pub const API_NOTE_Ef3 = @as(c_int, 0x009C);
pub const API_NOTE_E3 = @as(c_int, 0x00A5);
pub const API_NOTE_F3 = @as(c_int, 0x00AF);
pub const API_NOTE_Fs3 = @as(c_int, 0x00B9);
pub const API_NOTE_Gf3 = @as(c_int, 0x00B9);
pub const API_NOTE_G3 = @as(c_int, 0x00C4);
pub const API_NOTE_Af3 = @as(c_int, 0x00D0);
pub const API_NOTE_Gs3 = @as(c_int, 0x00D0);
pub const API_NOTE_A3 = @as(c_int, 0x00DC);
pub const API_NOTE_As3 = @as(c_int, 0x00E9);
pub const API_NOTE_Bf3 = @as(c_int, 0x00E9);
pub const API_NOTE_B3 = @as(c_int, 0x00F7);
pub const API_NOTE_C4 = @as(c_int, 0x0106);
pub const API_NOTE_Cs4 = @as(c_int, 0x0115);
pub const API_NOTE_Df4 = @as(c_int, 0x0115);
pub const API_NOTE_D4 = @as(c_int, 0x0126);
pub const API_NOTE_Ds4 = @as(c_int, 0x0137);
pub const API_NOTE_Ef4 = @as(c_int, 0x0137);
pub const API_NOTE_E4 = @as(c_int, 0x014A);
pub const API_NOTE_F4 = @as(c_int, 0x015D);
pub const API_NOTE_Fs4 = @as(c_int, 0x0172);
pub const API_NOTE_Gf4 = @as(c_int, 0x0172);
pub const API_NOTE_G4 = @as(c_int, 0x0188);
pub const API_NOTE_Af4 = @as(c_int, 0x019F);
pub const API_NOTE_Gs4 = @as(c_int, 0x019F);
pub const API_NOTE_A4 = @as(c_int, 0x01B8);
pub const API_NOTE_As4 = @as(c_int, 0x01D2);
pub const API_NOTE_Bf4 = @as(c_int, 0x01D2);
pub const API_NOTE_B4 = @as(c_int, 0x01EE);
pub const API_NOTE_C5 = @as(c_int, 0x020B);
pub const API_NOTE_Cs5 = @as(c_int, 0x022A);
pub const API_NOTE_Df5 = @as(c_int, 0x022A);
pub const API_NOTE_D5 = @as(c_int, 0x024B);
pub const API_NOTE_Ds5 = @as(c_int, 0x026E);
pub const API_NOTE_Ef5 = @as(c_int, 0x026E);
pub const API_NOTE_E5 = @as(c_int, 0x0293);
pub const API_NOTE_F5 = @as(c_int, 0x02BA);
pub const API_NOTE_Fs5 = @as(c_int, 0x02E4);
pub const API_NOTE_Gf5 = @as(c_int, 0x02E4);
pub const API_NOTE_G5 = @as(c_int, 0x0310);
pub const API_NOTE_Af5 = @as(c_int, 0x033F);
pub const API_NOTE_Gs5 = @as(c_int, 0x033F);
pub const API_NOTE_A5 = @as(c_int, 0x0370);
pub const API_NOTE_As5 = @as(c_int, 0x03A4);
pub const API_NOTE_Bf5 = @as(c_int, 0x03A4);
pub const API_NOTE_B5 = @as(c_int, 0x03DC);
pub const API_NOTE_C6 = @as(c_int, 0x0417);
pub const API_NOTE_Cs6 = @as(c_int, 0x0455);
pub const API_NOTE_Df6 = @as(c_int, 0x0455);
pub const API_NOTE_D6 = @as(c_int, 0x0497);
pub const API_NOTE_Ds6 = @as(c_int, 0x04DD);
pub const API_NOTE_Ef6 = @as(c_int, 0x04DD);
pub const API_NOTE_E6 = @as(c_int, 0x0527);
pub const API_NOTE_F6 = @as(c_int, 0x0575);
pub const API_NOTE_Fs6 = @as(c_int, 0x05C8);
pub const API_NOTE_Gf6 = @as(c_int, 0x05C8);
pub const API_NOTE_G6 = @as(c_int, 0x0620);
pub const API_NOTE_Af6 = @as(c_int, 0x067D);
pub const API_NOTE_Gs6 = @as(c_int, 0x067D);
pub const API_NOTE_A6 = @as(c_int, 0x06E0);
pub const API_NOTE_As6 = @as(c_int, 0x0749);
pub const API_NOTE_Bf6 = @as(c_int, 0x0749);
pub const API_NOTE_B6 = @as(c_int, 0x07B8);
pub const API_NOTE_C7 = @as(c_int, 0x082D);
pub const API_NOTE_Cs7 = @as(c_int, 0x08A9);
pub const API_NOTE_Df7 = @as(c_int, 0x08A9);
pub const API_NOTE_D7 = @as(c_int, 0x092D);
pub const API_NOTE_Ds7 = @as(c_int, 0x09B9);
pub const API_NOTE_Ef7 = @as(c_int, 0x09B9);
pub const API_NOTE_E7 = @as(c_int, 0x0A4D);
pub const API_NOTE_F7 = @as(c_int, 0x0AEA);
pub const API_NOTE_Fs7 = @as(c_int, 0x0B90);
pub const API_NOTE_Gf7 = @as(c_int, 0x0B90);
pub const API_NOTE_G7 = @as(c_int, 0x0C40);
pub const API_NOTE_Af7 = @as(c_int, 0x0CFA);
pub const API_NOTE_Gs7 = @as(c_int, 0x0CFA);
pub const API_NOTE_A7 = @as(c_int, 0x0DC0);
pub const API_NOTE_As7 = @as(c_int, 0x0E91);
pub const API_NOTE_Bf7 = @as(c_int, 0x0E91);
pub const API_NOTE_B7 = @as(c_int, 0x0F6F);
pub const API_NOTE_C8 = @as(c_int, 0x105A);
pub const API_NOTE_Cs8 = @as(c_int, 0x1153);
pub const API_NOTE_Df8 = @as(c_int, 0x1153);
pub const API_NOTE_D8 = @as(c_int, 0x125B);
pub const API_NOTE_Ds8 = @as(c_int, 0x1372);
pub const API_NOTE_Ef8 = @as(c_int, 0x1372);
pub const API_NOTE_E8 = @as(c_int, 0x149A);
pub const API_NOTE_F8 = @as(c_int, 0x15D4);
pub const API_NOTE_Fs8 = @as(c_int, 0x1720);
pub const API_NOTE_Gf8 = @as(c_int, 0x1720);
pub const API_NOTE_G8 = @as(c_int, 0x1880);
pub const API_NOTE_Af8 = @as(c_int, 0x19F5);
pub const API_NOTE_Gs8 = @as(c_int, 0x19F5);
pub const API_NOTE_A8 = @as(c_int, 0x1B80);
pub const API_NOTE_As8 = @as(c_int, 0x1D23);
pub const API_NOTE_Bf8 = @as(c_int, 0x1D23);
pub const API_NOTE_B8 = @as(c_int, 0x1EDE);
pub const API_NOTE_C9 = @as(c_int, 0x20B4);
pub const API_NOTE_Cs9 = @as(c_int, 0x22A6);
pub const API_NOTE_Df9 = @as(c_int, 0x22A6);
pub const API_NOTE_D9 = @as(c_int, 0x24B5);
pub const API_NOTE_Ds9 = @as(c_int, 0x26E4);
pub const API_NOTE_Ef9 = @as(c_int, 0x26E4);
pub const API_NOTE_E9 = @as(c_int, 0x2934);
pub const API_NOTE_F9 = @as(c_int, 0x2BA7);
pub const API_NOTE_Fs9 = @as(c_int, 0x2E40);
pub const API_NOTE_Gf9 = @as(c_int, 0x2E40);
pub const API_NOTE_G9 = @as(c_int, 0x3100);
pub const API_NOTE_Af9 = @as(c_int, 0x33EA);
pub const API_NOTE_Gs9 = @as(c_int, 0x33EA);
pub const API_NOTE_A9 = @as(c_int, 0x3700);
pub const API_NOTE_As9 = @as(c_int, 0x3A45);
pub const API_NOTE_Bf9 = @as(c_int, 0x3A45);
pub const API_NOTE_B9 = @as(c_int, 0x3DBC);
pub const API_NOTE_C10 = @as(c_int, 0x4168);
pub const API_NOTE_Cs10 = @as(c_int, 0x454C);
pub const API_NOTE_Df10 = @as(c_int, 0x454C);
pub const API_NOTE_D10 = @as(c_int, 0x496B);
pub const API_NOTE_Ds10 = @as(c_int, 0x4DC8);
pub const API_NOTE_Ef10 = @as(c_int, 0x4DC8);
pub inline fn API_TEMPO(bpm: anytype) @TypeOf(std.zig.c_translation.MacroArithmetic.div(@as(c_int, 6000), bpm)) {
    _ = &bpm;
    return std.zig.c_translation.MacroArithmetic.div(@as(c_int, 6000), bpm);
}
pub const API_TEMPO_60 = API_TEMPO(@as(c_int, 60));
pub const API_TEMPO_80 = API_TEMPO(@as(c_int, 80));
pub const API_TEMPO_90 = API_TEMPO(@as(c_int, 90));
pub const API_TEMPO_120 = API_TEMPO(@as(c_int, 120));
pub const API_SLIDE_NONE = @as(c_int, 0x0000);
pub const API_SLIDE_SLOW = @as(c_int, 0x0004);
pub const API_SLIDE_MED = @as(c_int, 0x0008);
pub const API_SLIDE_FAST = @as(c_int, 0x0010);
pub const API_SOUND_SRC_BEEP = @as(c_int, 0x00);
pub const API_SFX_POSITIVE = @as(c_int, 0x00);
pub const API_SFX_NEGATIVE = @as(c_int, 0x01);
pub const API_SFX_ERROR = @as(c_int, 0x02);
pub const API_SFX_CONFIRM = @as(c_int, 0x03);
pub const API_SFX_REJECT = @as(c_int, 0x04);
pub const API_SFX_SWEEP = @as(c_int, 0x05);
pub const API_SFX_COIN = @as(c_int, 0x06);
pub const API_SFX_LASER_LONG = @as(c_int, 0x07);
pub const API_SFX_POWERUP = @as(c_int, 0x08);
pub const API_SFX_VICTORY = @as(c_int, 0x09);
pub const API_SFX_DEFEAT = @as(c_int, 0x0A);
pub const API_SFX_FANFARE = @as(c_int, 0x0B);
pub const API_SFX_ALARM1 = @as(c_int, 0x0C);
pub const API_SFX_ALARM2 = @as(c_int, 0x0D);
pub const API_SFX_ALARM3 = @as(c_int, 0x0E);
pub const API_SFX_RING1 = @as(c_int, 0x0F);
pub const API_SFX_RING2 = @as(c_int, 0x10);
pub const API_SFX_RING3 = @as(c_int, 0x11);
pub const API_SFX_DANGER = @as(c_int, 0x12);
pub const API_SFX_EXPL_LONG = @as(c_int, 0x13);
pub const API_SFX_EXPL_MEDIUM = @as(c_int, 0x14);
pub const API_SFX_EXPL_SHORT = @as(c_int, 0x15);
pub const API_SFX_LASER_MEDIUM = @as(c_int, 0x16);
pub const API_SFX_LASER_SHORT = @as(c_int, 0x17);
pub const API_GROUP_TURTLE = @as(c_int, 0x09);
pub const API_FN_TURTLE_INIT = @as(c_int, 0x01);
pub const API_FN_TURTLE_TURN = @as(c_int, 0x02);
pub const API_FN_TURTLE_MOVE = @as(c_int, 0x03);
pub const API_FN_TURTLE_HIDE = @as(c_int, 0x04);
pub const API_FN_TURTLE_HOME = @as(c_int, 0x05);
pub const API_TURTLE_LEFT = @as(c_int, 270);
pub const API_TURTLE_RIGHT = @as(c_int, 90);
pub const API_TURTLE_FLIP = @as(c_int, 180);
pub const API_PEN_UP = @as(c_int, 0x00);
pub const API_PEN_DOWN = @as(c_int, 0x01);
pub const API_GROUP_UEXT = @as(c_int, 0x09);
pub const API_FN_UEXT_INIT = @as(c_int, 0x01);
pub const API_FN_GPIO_WRITE = @as(c_int, 0x02);
pub const API_FN_GPIO_READ = @as(c_int, 0x03);
pub const API_FN_SET_PORT_DIR = @as(c_int, 0x04);
pub const API_FN_I2C_WRITE = @as(c_int, 0x05);
pub const API_FN_I2C_READ = @as(c_int, 0x06);
pub const API_FN_ANALOG_READ = @as(c_int, 0x07);
pub const API_FN_I2C_STATUS = @as(c_int, 0x08);
pub const COLOR_BLACK = @as(c_int, 0x80);
pub const COLOR_RED = @as(c_int, 0x81);
pub const COLOR_GREEN = @as(c_int, 0x82);
pub const COLOR_YELLOW = @as(c_int, 0x83);
pub const COLOR_BLUE = @as(c_int, 0x84);
pub const COLOR_MAGENTA = @as(c_int, 0x85);
pub const COLOR_CYAN = @as(c_int, 0x86);
pub const COLOR_WHITE = @as(c_int, 0x87);
pub const COLOR_ALT_BLACK = @as(c_int, 0x88);
pub const COLOR_DARK_GREY = @as(c_int, 0x89);
pub const COLOR_DARK_GREEN = @as(c_int, 0x8A);
pub const COLOR_ORANGE = @as(c_int, 0x8B);
pub const COLOR_DARK_ORANGE = @as(c_int, 0x8C);
pub const COLOR_BROWN = @as(c_int, 0x8D);
pub const COLOR_PINK = @as(c_int, 0x8E);
pub const COLOR_LIGHT_GREY = @as(c_int, 0x8F);
pub const _NEO_TYPES_H = "";
pub const _NEO_SYSTEM_H = "";
pub const _NEO_CONSOLE_H = "";
pub const _NEO_FILE_H = "";
pub const NEO_FILE_DESTINATION_GRAPHICS = std.zig.c_translation.cast(?*anyopaque, std.zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hex));
pub const NEO_FILE_ATTR_DIRECTORY = @as(c_int, 0x01);
pub const NEO_FILE_ATTR_SYSTEM = @as(c_int, 0x02);
pub const NEO_FILE_ATTR_ARCHIVE = @as(c_int, 0x04);
pub const NEO_FILE_ATTR_READ_ONLY = @as(c_int, 0x08);
pub const NEO_FILE_ATTR_HIDDEN = @as(c_int, 0x10);
pub const _NEO_GRAPHICS_H = "";
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const _NEO_SPRITES_H = "";
pub const _NEO_CONTROLLER_H = "";
pub const _NEO_SOUND_H = "";
pub const _NEO_TURTLE_H = "";
pub const _NEO_UEXT_H = "";
pub const __ControlPort = struct___ControlPort;
pub const neo_pstring = struct_neo_pstring;
pub const neo_file_mode = enum_neo_file_mode;
pub const neo_uext_direction = enum_neo_uext_direction;
